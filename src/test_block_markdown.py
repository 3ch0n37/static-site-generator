import unittest
from block_markdown import markdown_to_blocks

class TestBlockMarkdown(unittest.TestCase):
    def test_markdown_to_blocks(self):
        md = """
This is **bolded** paragraph

This is another paragraph with _italic_ text and `code` here
This is the same paragraph on a new line

- This is a list
- with items
"""
        blocks = markdown_to_blocks(md)
        self.assertEqual(
            blocks,
            [
                "This is **bolded** paragraph",
                "This is another paragraph with _italic_ text and `code` here\nThis is the same paragraph on a new line",
                "- This is a list\n- with items",
            ],
        )

    # Generated by AI
    def test_empty_input(self):
        md = ""
        result = markdown_to_blocks(md)
        self.assertEqual(result, [])

    def test_whitespace_only_input(self):
        md = "     \n\n   "
        result = markdown_to_blocks(md)
        self.assertEqual(result, [])

    def test_multiple_consecutive_delimiters(self):
        md = "Block 1\n\n\n\nBlock 2\n\n\n\n\nBlock 3"
        result = markdown_to_blocks(md)
        self.assertEqual(result, ["Block 1", "Block 2", "Block 3"])

    def test_leading_and_trailing_delimiters(self):
        md = "\n\nBlock 1\n\nBlock 2\n\n"
        result = markdown_to_blocks(md)
        self.assertEqual(result, ["Block 1", "Block 2"])

    def test_no_delimiters(self):
        md = "This is a single block without any delimiters"
        result = markdown_to_blocks(md)
        self.assertEqual(result, ["This is a single block without any delimiters"])

    def test_mixed_whitespace_and_delimiters(self):
        md = """

          Block 1   

             Block 2 with leading/trailing spaces      

          Block 3
          """
        result = markdown_to_blocks(md)
        self.assertEqual(result, ["Block 1", "Block 2 with leading/trailing spaces", "Block 3"])

    def test_special_characters(self):
        md = "**Bold Text**\n\n_Italic Text_\n\n`Code Block`"
        result = markdown_to_blocks(md)
        self.assertEqual(result, ["**Bold Text**", "_Italic Text_", "`Code Block`"])
