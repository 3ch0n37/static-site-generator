import unittest
from block_markdown import markdown_to_blocks, block_to_block_type, BlockType, markdown_to_html_node

class TestBlockMarkdown(unittest.TestCase):
    def test_markdown_to_blocks(self):
        md = """
This is **bolded** paragraph

This is another paragraph with _italic_ text and `code` here
This is the same paragraph on a new line

- This is a list
- with items
"""
        blocks = markdown_to_blocks(md)
        self.assertEqual(
            blocks,
            [
                "This is **bolded** paragraph",
                "This is another paragraph with _italic_ text and `code` here\nThis is the same paragraph on a new line",
                "- This is a list\n- with items",
            ],
        )

    # Generated by AI
    def test_empty_input(self):
        md = ""
        result = markdown_to_blocks(md)
        self.assertEqual(result, [])

    def test_whitespace_only_input(self):
        md = "     \n\n   "
        result = markdown_to_blocks(md)
        self.assertEqual(result, [])

    def test_multiple_consecutive_delimiters(self):
        md = "Block 1\n\n\n\nBlock 2\n\n\n\n\nBlock 3"
        result = markdown_to_blocks(md)
        self.assertEqual(result, ["Block 1", "Block 2", "Block 3"])

    def test_leading_and_trailing_delimiters(self):
        md = "\n\nBlock 1\n\nBlock 2\n\n"
        result = markdown_to_blocks(md)
        self.assertEqual(result, ["Block 1", "Block 2"])

    def test_no_delimiters(self):
        md = "This is a single block without any delimiters"
        result = markdown_to_blocks(md)
        self.assertEqual(result, ["This is a single block without any delimiters"])

    def test_mixed_whitespace_and_delimiters(self):
        md = """

          Block 1   

             Block 2 with leading/trailing spaces      

          Block 3
          """
        result = markdown_to_blocks(md)
        self.assertEqual(result, ["Block 1", "Block 2 with leading/trailing spaces", "Block 3"])

    def test_special_characters(self):
        md = "**Bold Text**\n\n_Italic Text_\n\n`Code Block`"
        result = markdown_to_blocks(md)
        self.assertEqual(result, ["**Bold Text**", "_Italic Text_", "`Code Block`"])

    def test_paragraph_block(self):
        block = "This is a simple paragraph block."
        result = block_to_block_type(block)
        self.assertEqual(result, BlockType.PARAGRAPH)

    def test_heading_block(self):
        block = "# This is a single-line heading"
        result = block_to_block_type(block)
        self.assertEqual(result, BlockType.HEADING)

    def test_code_block(self):
        block = "```\nprint('Hello, world!')\n```"
        result = block_to_block_type(block)
        self.assertEqual(result, BlockType.CODE)

    def test_unordered_list_block(self):
        block = "- Item 1\n- Item 2\n- Item 3"
        result = block_to_block_type(block)
        self.assertEqual(result, BlockType.ULIST)

    def test_ordered_list_block(self):
        block = "1. Step one\n2. Step two\n3. Step three"
        result = block_to_block_type(block)
        self.assertEqual(result, BlockType.OLIST)

    def test_invalid_list_blocks(self):
        unordered_block = "Item 1\n- Item 2"
        ordered_block = "1. Step one\n2) Step two"
        self.assertEqual(block_to_block_type(unordered_block), BlockType.PARAGRAPH)
        self.assertEqual(block_to_block_type(ordered_block), BlockType.PARAGRAPH)

    def test_empty_block(self):
        block = ""
        result = block_to_block_type(block)
        self.assertEqual(result, BlockType.PARAGRAPH)

    def test_block_with_special_characters(self):
        block = "!@#$%^&*()"
        result = block_to_block_type(block)
        self.assertEqual(result, BlockType.PARAGRAPH)

    def test_multiline_paragraph(self):
        block = "This is a paragraph\nthat spans multiple lines."
        result = block_to_block_type(block)
        self.assertEqual(result, BlockType.PARAGRAPH)

    def test_paragraph(self):
        md = """
This is **bolded** paragraph
text in a p
tag here

"""

        node = markdown_to_html_node(md)
        html = node.to_html()
        self.assertEqual(
            html,
            "<div><p>This is <b>bolded</b> paragraph text in a p tag here</p></div>",
        )

    def test_paragraphs(self):
        md = """
This is **bolded** paragraph
text in a p
tag here

This is another paragraph with _italic_ text and `code` here

"""

        node = markdown_to_html_node(md)
        html = node.to_html()
        self.assertEqual(
            html,
            "<div><p>This is <b>bolded</b> paragraph text in a p tag here</p><p>This is another paragraph with <i>italic</i> text and <code>code</code> here</p></div>",
        )

    def test_lists(self):
        md = """
- This is a list
- with items
- and _more_ items

1. This is an `ordered` list
2. with items
3. and more items

"""

        node = markdown_to_html_node(md)
        html = node.to_html()
        self.assertEqual(
            html,
            "<div><ul><li>This is a list</li><li>with items</li><li>and <i>more</i> items</li></ul><ol><li>This is an <code>ordered</code> list</li><li>with items</li><li>and more items</li></ol></div>",
        )

    def test_headings(self):
        md = """
# this is an h1

this is paragraph text

## this is an h2
"""

        node = markdown_to_html_node(md)
        html = node.to_html()
        self.assertEqual(
            html,
            "<div><h1>this is an h1</h1><p>this is paragraph text</p><h2>this is an h2</h2></div>",
        )

    def test_blockquote(self):
        md = """
> This is a
> blockquote block

this is paragraph text

"""

        node = markdown_to_html_node(md)
        html = node.to_html()
        self.assertEqual(
            html,
            "<div><blockquote>This is a blockquote block</blockquote><p>this is paragraph text</p></div>",
        )

    def test_code(self):
        md = """
```
This is text that _should_ remain
the **same** even with inline stuff
```
"""

        node = markdown_to_html_node(md)
        html = node.to_html()
        self.assertEqual(
            html,
            "<div><pre><code>This is text that _should_ remain\nthe **same** even with inline stuff\n</code></pre></div>",
        )